[{"/Users/adenrashid/seir/code-alongs/12-project-4/ReportIt/src/index.js":"1","/Users/adenrashid/seir/code-alongs/12-project-4/ReportIt/src/mapStyles.js":"2","/Users/adenrashid/seir/code-alongs/12-project-4/ReportIt/src/App.js":"3","/Users/adenrashid/seir/code-alongs/12-project-4/ReportIt/src/reportWebVitals.js":"4"},{"size":289,"mtime":1606782894227,"results":"5","hashOfConfig":"6"},{"size":3344,"mtime":1606703977952,"results":"7","hashOfConfig":"6"},{"size":10442,"mtime":1606899703019,"results":"8","hashOfConfig":"6"},{"size":362,"mtime":1606693466207,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1h305qg",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/adenrashid/seir/code-alongs/12-project-4/ReportIt/src/index.js",[],["21","22"],"/Users/adenrashid/seir/code-alongs/12-project-4/ReportIt/src/mapStyles.js",["23"],"export default [\n    {\n        \"featureType\": \"all\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"saturation\": 36\n            },\n            {\n                \"color\": \"#000000\"\n            },\n            {\n                \"lightness\": 40\n            }\n        ]\n    },\n    {\n        \"featureType\": \"all\",\n        \"elementType\": \"labels.text.stroke\",\n        \"stylers\": [\n            {\n                \"visibility\": \"on\"\n            },\n            {\n                \"color\": \"#000000\"\n            },\n            {\n                \"lightness\": 16\n            }\n        ]\n    },\n    {\n        \"featureType\": \"all\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#000000\"\n            },\n            {\n                \"lightness\": 20\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [\n            {\n                \"color\": \"#000000\"\n            },\n            {\n                \"lightness\": 17\n            },\n            {\n                \"weight\": 1.2\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#000000\"\n            },\n            {\n                \"lightness\": 20\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#000000\"\n            },\n            {\n                \"lightness\": 21\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#000000\"\n            },\n            {\n                \"lightness\": 17\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [\n            {\n                \"color\": \"#000000\"\n            },\n            {\n                \"lightness\": 29\n            },\n            {\n                \"weight\": 0.2\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#000000\"\n            },\n            {\n                \"lightness\": 18\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.local\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#000000\"\n            },\n            {\n                \"lightness\": 16\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#000000\"\n            },\n            {\n                \"lightness\": 19\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#000000\"\n            },\n            {\n                \"lightness\": 17\n            }\n        ]\n    }\n]","/Users/adenrashid/seir/code-alongs/12-project-4/ReportIt/src/App.js",["24","25","26","27"],"import React from 'react';\nimport { \n  GoogleMap, \n  useLoadScript,\n  Marker,\n  InfoWindow, \n} from '@react-google-maps/api';\nimport mapStyles from './mapStyles';\nimport { formatRelative } from \"date-fns\";\nimport usePlacesAutocomplete, {\n  getGeocode, \n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport Geocode from \"react-geocode\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport \"@reach/combobox/styles.css\";\nimport './App.css';\n\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"100vh\",\n};\nconst center = {\n  lat: -37.8136,\n  lng: 144.9631, \n}; \nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nexport default function App() {\n\n  const [markers, setMarkers] = React.useState([]);\n\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul className=\"routes-ul\">\n            <li className=\"routes\">\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className=\"routes\">\n              <Link to=\"/map\">Map</Link>\n            </li>\n            <li className=\"routes\">\n              <Link to=\"/incidents\">Incidents</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/map\">\n            <ViewMap markers={markers} setMarkers={setMarkers}/>\n          </Route>\n          <Route path=\"/incidents\">\n            <ViewIncidents markers={markers}/>\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n\n};\n\nfunction Home() {\n  return (\n    <div>\n      <h1 className=\"title\">ReportIt</h1>\n      <h2 className=\"subtitle\">Pin an incident near you</h2>\n      <p className=\"info\">ReportIt is made for users to report incidents near their location in real time. \n      <br/><br/>\n      It helps others using the app to avoid certain areas where accidents may have occurred.\n      <br/><br/>\n      You can pin an incident by searching for your location in the search bar, or using your current location (you need to enable this in your browser). \n      <br/><br/>\n      Then, click on the map where you would like to drop a pin, and add a description of the incident.\n      <br/><br/>\n      If you need to update the description, please click on the pin again, and update the description. \n      <br/><br/>\n      Thanks for using ReportIt!\n      </p>\n      <br/>\n      <footer className=\"footer\">Created by Aden for Project 4 of the Software Engineering Immersive - General Assembly &copy; 2020</footer>\n    </div>\n  );\n}\n\nfunction ViewMap({ markers, setMarkers }) {\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries,\n  });\n  const [selected, setSelected] = React.useState(null);\n  const [loading, setLoading] = React.useState(false);\n  const [input, setInput] = React.useState('');\n\n  const onMapClick = React.useCallback((e) => {\n    Geocode.fromLatLng(e.latLng.lat(), e.latLng.lng()).then(\n      response => {\n        const address = response.results[0].formatted_address;\n        setMarkers((current) => [\n          ...current,\n          {\n            lat: e.latLng.lat(),\n            lng: e.latLng.lng(),\n            time: new Date(),\n            description: \"\",\n            location: address\n          }\n        ]);\n      },\n      error => {\n        console.error(error);\n      }\n    ) \n  }, []);\n\n  const onMapDrag = React.useCallback((e, index) => {\n    Geocode.fromLatLng(e.latLng.lat(), e.latLng.lng()).then(\n      response => {\n        const address = response.results[0].formatted_address;\n        setMarkers((current) => {\n          const markers = [...current];\n          markers[index] = { \n          lat: e.latLng.lat(),\n          lng: e.latLng.lng(),\n          time: new Date(),\n          description: markers[index].description, \n          location: address\n          }\n          return markers;\n        });\n      },\n      error => {\n        console.error(error);\n      }\n    ) \n  }, []);\n\n  const updateDescription = React.useCallback((e) => {\n    setInput(e.target.value);\n    if (e.target.value.length > 0) {\n      setLoading(true)\n    } else {\n      setLoading(false)\n    }\n  })\n\n  const onSubmit = React.useCallback((e) => {\n    e.preventDefault();\n    markers[markers.indexOf(selected)].description = `${input}`;\n    setLoading(false);\n    setInput('');\n  })\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({lat, lng}) => {\n    mapRef.current.panTo({lat, lng});\n    mapRef.current.setZoom(14);\n  }, []);\n    \n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n\n  return (\n    <div>\n      <h1 className=\"title\">ReportIt</h1>\n      <h2 className=\"subtitle\">Pin an incident near you</h2>\n\n      <Search panTo={panTo}/>\n      <Locate panTo={panTo}/>\n\n      <GoogleMap \n        mapContainerStyle={mapContainerStyle} \n        zoom={12} \n        center={center} \n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        {markers.map((marker, index) => (\n          <Marker \n            key={index}\n            time={marker.time.toISOString()}\n            position={{lat: marker.lat, lng: marker.lng}}\n            draggable={true}\n            icon={{\n              url: '/car.png',\n              scaledSize: new window.google.maps.Size(30,30),\n              origin: new window.google.maps.Point(0,0),\n              anchor: new window.google.maps.Point(15,15),\n            }}\n            onClick={() => {\n              setSelected(marker);\n            }}\n            onDragEnd={\n              (e) => onMapDrag(e, index)\n            }\n          />\n        ))}\n \n        {selected ? (\n          <InfoWindow\n          position={{lat: selected.lat, lng: selected.lng}} \n          onCloseClick={() => {setSelected(null)}}\n          >\n            <div>\n              <h2>Incident Reported!</h2>\n              <form \n                action=\"\"\n                onSubmit={onSubmit}>\n                  <label htmlFor=\"\">Add an update:</label>\n                  <input\n                    className=\"update-input\"\n                    value={input} \n                    onChange={\n                      (e) => updateDescription(e)\n                    }\n                  />\n                <button>Update</button>\n                {loading ? <span className=\"loading\">🔷</span> : ''}\n              </form>\n              <p>Latest Update: {selected.description}</p>  \n              <p>Location: {selected.location} </p>\n              <p>Reported: { formatRelative(selected.time, new Date()) }</p>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n    </div>\n  )\n}\n\nfunction Locate({panTo}) {\n  return ( \n    <button className=\"locate\" onClick={() => {\n      navigator.geolocation.getCurrentPosition((position) => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        })\n      }, () => null)\n    }}>\n      <img src=\"compass.png\" alt=\"compass - pin to locate me\" />\n      <p className=\"description\">Find my current location</p>\n    </button>\n  );\n}\n\nfunction Search({panTo}) {\n  const {\n    ready, \n    value, \n    suggestions: {status, data}, \n    setValue, \n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {lat: () => -37.700560, lng: () => 144.736810 },\n      radius: 20 * 1000,\n    }\n  })\n\n  return (\n    <Combobox onSelect={async (address) => {\n\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({address});\n        const { lat, lng } = await getLatLng(results[0]);\n        panTo({ lat, lng });\n      } catch(error) {\n      console.log(\"error!\")\n      }\n    }}>\n  \n    <ComboboxInput \n      value={value} \n      onChange={(e) => {\n        setValue(e.target.value)\n      }} \n      disabled={!ready}\n      placeholder=\"Enter a location\"\n      className=\"search\"\n    />\n  \n    <ComboboxPopover>\n      <ComboboxList>\n      {status === \"OK\" && \n      data.map(({id, description}) => \n        <ComboboxOption key={id} value={description} />)}\n        </ComboboxList>\n        </ComboboxPopover>\n    </Combobox>\n  );\n\n}\n\nfunction ViewIncidents( {markers} ) {\n\n  const [timeDescending, setTimeDescending] = React.useState(false);\n  const [timeAscending, setTimeAscending] = React.useState(false);\n\n  const sortTimeDescending = \n    markers.map((marker, index) => {\n      return ( \n        <div className=\"incident-reports-wrap\">\n          <li className=\"incident-reports\" key={marker[index]}>\n            <p>Address: {marker.location}</p>\n            <p>Pinned Location: {marker.lat}, {marker.lng}</p>\n            <p>Time Reported: {marker.time.toString()}</p>\n            <p>Latest Update: {marker.description}</p>\n          </li>\n        </div>\n      )\n    })\n\n  const markersReversed = [...markers].reverse();\n\n  const sortTimeAscending = \n    markersReversed.map((marker, index) => {\n      return ( \n        <div className=\"incident-reports-wrap\">\n          <li className=\"incident-reports\" key={marker[index]}>\n            <p>Address: {marker.location}</p>\n            <p>Pinned Location: {marker.lat}, {marker.lng}</p>\n            <p>Time Reported: {marker.time.toString()}</p>\n            <p>Latest Update: {marker.description}</p>\n          </li>\n        </div>\n      )\n    })\n\n  return (\n    <div>\n      <h1 className=\"title\">ReportIt</h1>\n        <h2 className=\"subtitle\">Pin an incident near you</h2>\n        <h2 className=\"view-incidents\">Reported Incidents</h2>\n        <h2 className=\"filter\">Filter By:</h2>\n        <div className=\"filters-wrap\">\n          <button className=\"filters\" onClick={\n            () => setTimeDescending(true)\n            }>Time Reported (Descending)\n          </button>\n          <button className=\"filters\" onClick={\n            () => setTimeAscending(true)\n            }>Time Reported (Ascending)\n          </button>\n        </div>\n        <ul className=\"incident-ul\">\n          {timeDescending ? sortTimeDescending : ''}\n          {timeAscending ? sortTimeAscending : ''}\n        </ul>\n    </div>\n  )\n}","/Users/adenrashid/seir/code-alongs/12-project-4/ReportIt/src/reportWebVitals.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":1,"nodeType":"34","endLine":167,"endColumn":2},{"ruleId":"35","severity":1,"message":"36","line":138,"column":6,"nodeType":"37","endLine":138,"endColumn":8,"suggestions":"38"},{"ruleId":"35","severity":1,"message":"36","line":160,"column":6,"nodeType":"37","endLine":160,"endColumn":8,"suggestions":"39"},{"ruleId":"35","severity":1,"message":"40","line":162,"column":29,"nodeType":"41","endLine":162,"endColumn":46},{"ruleId":"35","severity":1,"message":"40","line":171,"column":20,"nodeType":"41","endLine":171,"endColumn":37},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook React.useCallback has a missing dependency: 'setMarkers'. Either include it or remove the dependency array. If 'setMarkers' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["44"],["45"],"React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","MemberExpression","no-global-assign","no-unsafe-negation",{"desc":"46","fix":"47"},{"desc":"46","fix":"48"},"Update the dependencies array to be: [setMarkers]",{"range":"49","text":"50"},{"range":"51","text":"50"},[3628,3630],"[setMarkers]",[4232,4234]]